vector的使用方法(动态数组)
#include<iostream>
#include<vector>
using namespace std;
void print(vector<double> V)
{
	for(int i=0;i<V.size();i++)
	{
		cout<<V[i]<<" ";
	}
	cout<<endl;
}
int main(void)
{
	vector<double> V;
	V.push_back(0.1);
	V.push_back(0.2);
	V.push_back(0.3);
	V[2]=0.4;
	print(V);
	V.insert(V.begin()+2,0.8);
	print(V);
	V.erase(V.begin()+1);
	print(V);
	V.push_back(0.9);
	print(V);
	return 0;
}
vector 是一种可以用作动态数组的数据结构。vector<double> V是一个声明明，用于生成管理 double 型元素的向量。 STL 提供的vector是一个模板，需要我们在 < >中指定类型，从而定义管理该类型数据的容器。在访问vector 中的元素（ 赋值或写入 ）时，可以与数组一样使用“[ ]”运算符。

vector 的成员函数示例
函数名 功能 复杂度
►size( ) 返回向量的元素数
►push_back(x) 在向量末尾添加元素
►pop_back( ) 删除向量的最后一个元素
►begin( ) 返回指向向量开头的迭代器
►end( ) 返回指向向量末尾 （ 最后一个元素的后一个位置 ） 的迭代器
►insert (p） 在向量的位置 p处插入元素 x
►erase(p) 删除向量中位置 p的元素 
►clear( ) 删除向量中所有元素
►back()尾元素
►front()头元素

