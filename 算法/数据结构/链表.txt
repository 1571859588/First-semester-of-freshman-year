单向链表的建立
#include<stdio.h>
#include<stdlib.h>
struct link
{
	int data;
	struct link *next;
};
struct link * AppendNode(struct link *head);
void DisplyNode(struct link* head);
void DeleteMemory(struct link* head);
int main(void)
{
	int i=0;
	char c;
	struct link*head=NULL;
	printf("Do you want to append a new node(Y/N)?\n");
	scanf(" %c",&c);
	while(c=='Y'||c=='y')
	{
		head=AppendNode(head);
		DisplyNode(head);
		printf("Do you want to append a new node(Y/N)?\n");
		scanf(" %c",&c);
		i++;
	}
	printf("%d new nodes have been apended!\n");
	DeleteMemory(head);
}
struct link*AppendNode(struct link *head)
{
	struct link *p=NULL,*pr=head;
	int data;
	p=(struct link *)malloc(sizeof(struct link));
	if(p==NULL)
	{
		printf("没有足够的内存\n");
		return 0;
	}
	if(head==NULL)
	{
		head=p;
	}
	else 
	{
		while(pr->next!=NULL)
		pr=pr->next;
		pr->next=p;
	}
	printf("输入数据\n");
	scanf("%d",&data);
	p->data=data;
	p->next=NULL;
	return head;
}
void DisplyNode(struct link *head)
{
	struct link *p=head;
	int j=1;
	while(p!=NULL)
	{
		printf("%5d%10d\n",j,p->data);
		p=p->next;
		j++;
	}
}
void DeleteMemory(struct link *head)
{
	struct link *p=head,*pr=NULL;
	while(p!=NULL)
	{
		pr=p;
		p=p->next;
		free(pr);
	}
}


//从head指向的链表中删除的一个节点，返回删除节点后的链表头指针
struct link *DeleteNode(struct link *head,int nodeData)
{
	struct link *p=head,*pr=head;
	if(head==NULL)
	{
		printf("链表已空\n");
		return head;
	}
	while(nodeData!=p->data&&p->next!=NULL)
	{
		pr=p;
		p->next;
	}
	if(nodeData==p->data)
	{
		if(p==head)
		head=p->next;
		else 
		{
			pr->next=p->next;
		}
		free(p);
	}
	else
	{
		printf("未查找到数值\n");
	}
	return head;
 } 

 //在升序排序的链表中插入一个节点，返回头指针
 struct link *InsertNode(struct link *head,int nodeData)
 {
 	struct link *pr=head,*p=head,*temp=NULL;
 	p=(struct link*)malloc(sizeof(struct link));
 	if(p==NULL)
 	{
 		printf("没有足够的空间\n");
 		return 0;
	 }
	 p->next=NULL;
	 p->data=nodeData;
	 if(head==NULL)
	 {
	 	head=p;
	 }
	 else 
	 {
	 	while(pr->data<nodeData&&pr->next!=NULL)
	 	{
	 		temp=pr;
	 		pr=pr->next;
		}
		if(pr->data>=nodeData)
		{
			if(pr==head)
			{
				p->next=head;
				head=p;
			}
			else
			{
				pr=temp;
				p->next=pr->next;
				pr->next=p;
			}
		}
		else
		{
			pr->next=p;
		}
	 }
	 return head; 
  } 